<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2016/01/01/1/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Latex 写中文毕业论文</title>
    <url>/2019/03/01/1/</url>
    <content><![CDATA[<p>最近疫情在家写毕业论文，前期折腾了一下latex模板的相关事情，算是搞的比较清楚了，所以后期论文写起来也比较顺利，遇到问题也可以随时解决。现在论文也搞得差不多了，准备记录一下。</p>
<span id="more"></span>
<p>主要分成下面几个部分来总结一下latex写中文毕业论文的相关问题</p>
<ol type="1">
<li>latex安装与编辑器的使用</li>
<li>模板与编译器</li>
<li>论文中会遇到的一些问题及解决办法</li>
</ol>
<h1 id="latex安装与编辑器的使用">latex安装与编辑器的使用</h1>
<h2 id="下载与安装">下载与安装</h2>
<p>肯定有很多人 <del>（包括我自己）</del>还在使用甚至还在推荐别人使用CTeX套装，注意我的用词不要引起歧义哈。我说的这个ctex套装指的是那个下载下来安装好就又有latex可以用，又帮你按了一个winedit的那个套装，一般是在下面这个网址下载的</p>
<blockquote>
<p>http://www.ctex.org/HomePage</p>
</blockquote>
<p>但是我想说的是，除非有什么上古代码必须要这个，<strong>尽量还是别安装这个了</strong>。 原因有两点</p>
<ol type="1">
<li>太旧了，很久都没人维护了</li>
<li>安装有风险，很多人报告有某种位置情况下会覆盖系统的Path变量</li>
</ol>
<p>那么去哪里下载什么呢，我建议下载最新的texlive，原因是：</p>
<blockquote>
<p>我看网上说还挺好用，然后我自己试了一下确实没出啥问题</p>
</blockquote>
<p>下载地址在这里：https://www.tug.org/texlive/</p>
<p>嫌弃官网慢的话，清华大学镜像也是挺不错的， 这里下载 https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/Images/texlive2019.iso</p>
<p>下载下来，挂载好镜像文件（这个就不写了哈，大家可以自己搜啥叫挂载镜像文件，或者来<a href="https://buhuibaidu.now.sh/?s=windows%E6%8C%82%E8%BD%BDiso%E9%95%9C%E5%83%8F">这里看</a>），就可以安装了。 没记错的话里面有一个 install-tl-windows.bat 文件，双击就可以安装了。</p>
<p>安装大约需要1个小时（都不一定够）安装好以后，可以把安装的路径加入系统变量Path里面，以便后面说的编辑器调用。安装路径指的是类似下面这样的路径，最后一定是bin,因为这个文件夹里面才有各种exe程序。</p>
<blockquote>
<p>C:\2019</p>
</blockquote>
<h2 id="写论文用到的编辑器">写论文用到的编辑器</h2>
<p>这个话题有点引战。。我就说我咋写的吧，我本人主要用texstudio，偶尔用vscode+latex workshop插件。</p>
<p>texstudio官网下载就好，http://www.texstudio.org/ ， 简单易用，几乎0配置，界面也友好。</p>
<h1 id="模板与编译器">模板与编译器</h1>
<p>我是北京交通大学的，我们学校没有官方latex模板，但是有大佬们做了一个非官方的，还是与word版本有些不同，我自己又改了改，终于算是几乎一模一样了。</p>
<p>开源在这里，有需要的可以自取</p>
<blockquote>
<p><a href="https://github.com/xfdywy/bjtu-thesis-templete">https://github.com/xfdywy/bjtu-thesis-templete</a></p>
</blockquote>
<p>如果发现问题可以提issue，或者评论。</p>
<p>模板基本就是一个.cls文件，在里面定义了论文的各个章节模块的格式。</p>
<p>这个模板需要用xelatex进行编译，别忘了在编辑器里面把编译工具换成xelatex，texstudio默认的话好像是pdflatex。</p>
<p>.</p>
<h1 id="遇到的问题">遇到的问题</h1>
<h2 id="xelatex在windows-10系统上至少在win10上太慢了">xelatex在windows 10系统上（至少在win10上）太慢了</h2>
<p>解决方法：在安装目录下找到xelatex.exe，就刚刚添加到Path里面的那个文件夹下面，然后</p>
<ol type="1">
<li>右击</li>
<li>属性</li>
<li>兼容性</li>
<li>以兼容模式运行这个程序</li>
<li>windows7</li>
</ol>
<p>知乎上这个问题下面的回答大家也可以试试 https://www.zhihu.com/question/53981204 。</p>
<p>反正我做完了以后速度就还能接受了。不编译很多图片的情况下，100页左右的论文也就不到一分钟。</p>
<p>推荐大家分章节写，平时都把别的章节注释掉，这样可以极大加快编译速度。</p>
<h2 id="图标标题如何中英文两行中文在上英文在下">图标标题如何中英文两行，中文在上，英文在下</h2>
使用
<p>这个包</p>
<p>然后在论文开始之前设置如下</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\captionsetup[<span class="string">figure</span>][<span class="symbol">bi-first</span>]&#123;name=图&#125;</span><br><span class="line">\captionsetup[<span class="string">figure</span>][<span class="symbol">bi-second</span>]&#123;name=Figure&#125;</span><br><span class="line"></span><br><span class="line">\captionsetup[<span class="string">table</span>][<span class="symbol">bi-first</span>]&#123;name=表&#125;</span><br><span class="line">\captionsetup[<span class="string">table</span>][<span class="symbol">bi-second</span>]&#123;name=Table&#125;</span><br></pre></td></tr></table></figure>
<h2 id="如何在公式环境中单独标号一行">如何在公式环境中单独标号一行</h2>
<p>一般我们如果给align或者equation环境中，公式会默认加标号，但是如果我们加上星号*，就会没有标号。</p>
<p>奇怪的需求来了，我们想在align* 环境中给某一行加标号怎么办呢？在论文最开始的地方</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newcommand</span><span class="keyword">\numberthis</span>&#123;<span class="keyword">\addtocounter</span>&#123;equation&#125;&#123;1&#125;<span class="keyword">\tag</span>&#123;<span class="keyword">\theequation</span>&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>如果在align* 这样的环境中，想给某一行单独标号，可以在那一行最后用这个命令 </p>
<h2 id="算法框中文">算法框中文</h2>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>[ruled,linesnumbered]&#123;algorithm2e&#125;</span><br><span class="line"><span class="keyword">\renewcommand</span>&#123;<span class="keyword">\algorithmcfname</span>&#125;&#123;算法&#125;</span><br><span class="line"><span class="keyword">\SetKwInput</span>&#123;KwIn&#125;&#123;输入&#125;</span><br><span class="line"><span class="keyword">\SetKwInput</span>&#123;KwOut&#125;&#123;输出&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入图片">插入图片</h2>
<p>建议使用如下两个包</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;subfig&#125;</span><br></pre></td></tr></table></figure>
<p>之后在正文中用</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="keyword">\begin</span>&#123;figure&#125;[h]</span><br><span class="line"> 	<span class="keyword">\centering</span> </span><br><span class="line"> 	<span class="keyword">\subfloat</span>[a ]&#123;</span><br><span class="line"> 		<span class="keyword">\label</span>&#123;fig&#125;</span><br><span class="line"> 		<span class="keyword">\includegraphics</span>[width=1.8in,height=1.5in]&#123;a.png&#125;&#125;</span><br><span class="line"> 	<span class="keyword">\bicaption</span>&#123;你好，世界&#125;&#123;Hello world &#125; </span><br><span class="line"> 	<span class="keyword">\label</span>&#123;fig1&#125;</span><br><span class="line"><span class="keyword">\end</span>&#123;figure&#125;	</span><br></pre></td></tr></table></figure>
<p>这样的代码，可以插入子图。</p>
<h2 id="定理定义引理等">定理，定义，引理等</h2>
<p>如下， 语法解释大概是这样</p>
<p>[按照谁编号]</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\newtheorem</span>&#123;theorem&#125;&#123;定理&#125;[section]</span><br><span class="line"><span class="keyword">\newtheorem</span>&#123;lemma&#125;&#123;引理&#125;[theorem]</span><br><span class="line"><span class="keyword">\newtheorem</span>&#123;corollary&#125;&#123;推论&#125; [theorem]</span><br><span class="line"><span class="keyword">\newtheorem</span>&#123;assumption&#125;&#123;假设&#125;[chapter]</span><br></pre></td></tr></table></figure>
<h2 id="模板中的黑科技-ugly-trick">模板中的黑科技 <del>（ugly trick）</del></h2>
<p>这个是为了调整因为字体到Times New Roman的</p>
<p>第二行是说我们以后可以用{ABC}这样的语法把ABC强行设成Times New Roman字体</p>
<p>需要电脑中有times.ttf这个文件，并且在系统路径中了。如果没有这个文件需要先下载，如果不在系统路径中，这可以把times.ttf文件复制一份放到latex项目的文件夹下。不然会提示找不到，报错。</p>
<p>windows电脑应该都有这个文件吧， C:这个文件夹下。如果没有， git里面我放了一份，可以自取。</p>
<h2 id="以后想到了再补充">以后想到了再补充</h2>
<p>.</p>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>中文</tag>
      </tags>
  </entry>
  <entry>
    <title>c++ notebook</title>
    <url>/2016/08/10/2/</url>
    <content><![CDATA[<p>就用这个帖子记录一下自己学习c++遇到的一些小细节吧</p>
<p>#1 atof</p>
<blockquote>
<p>http://blog.csdn.net/zhaoyl03/article/details/8176387</p>
</blockquote>
<p>它将ascII字符串转换为相应的单精度浮点数，比如传入"1.234"，经过处理后就返回float类型的数1.234 。类似的还有atoi 、atol、itoa、ftoa等等。</p>
<p>#2 随机数</p>
<blockquote>
<p>http://www.cnblogs.com/egmkang/archive/2012/09/06/2673253.html</p>
</blockquote>
<p>　　标准把随机数抽象成随机数引擎和分布两部分.引擎用来产生随机数,分布产生特定分布的随机数(比如平均分布,正太分布等).</p>
<p>　　标准提供三种常用的引擎:linear_congruential_engine,mersenne_twister_engine和subtract_with_carry_engine.第一种是线性同余算法,第二种是梅森旋转算法,第三种带进位的线性同余算法.第一种是最常用的,而且速度也是非常快的; 第二种号称是最好的伪随机数生成器;第三种没用过....</p>
<p>　　随机数引擎接受一个整形参数当作种子,不提供的话,会使用默认值. 推荐使用random_device来产生一个随机数当作种子.(windows下爱咋整咋整,谁叫windows的random_device是调用rand_s)</p>
]]></content>
      <tags>
        <tag>-c++程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2018/03/29/1/</url>
    <content><![CDATA[
]]></content>
  </entry>
  <entry>
    <title>折腾linux服务器</title>
    <url>/2018/04/15/1/</url>
    <content><![CDATA[<p>学校里有一台服务器，最近又起了折腾之心。于是就修修补补，在服务器上装上了docker，nginx，架了一个网盘服务nextcloud。下面记录一下遇到的坑，还有解决办法。</p>
<p>注明一下，一下所有操作都是在centos6.9 ，内核版本2.6.32-696.3.2.el6.x86_64 上做的。 查看内核版本和 发行版本号的命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;issue (此命令可用于docker内系统版本号查询)</span><br><span class="line">uname -a</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure> # yum 换阿里云的源 这一步不是必须的，但是换上之后速度太爽了 1. 备份 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure> 2. 下载新的CentOS-Base.repo 到/etc/yum.repos.d/</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum<span class="selector-class">.repos</span>.d/CentOS-Base<span class="selector-class">.repo</span> http:<span class="comment">//mirrors.aliyun.com/repo/Centos-6.repo</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li>将不需要的repo关掉（这一步不是必须的）</li>
</ol>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">vim xxx.repo</span><br></pre></td></tr></table></figure>
<p>改成 enabled=0</p>
<ol start="4" type="1">
<li>更新</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<h1 id="docker">docker</h1>
<p>docker 官网上已经只支持centos7 内核版本号3.10 以上。所以我只能安装非官方版了 ## 安装 用以下命令： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install docker-io</span><br><span class="line">service docker start</span><br></pre></td></tr></table></figure> 事实证明也是能用的。就是有的时候需要高版本的docker 就瞎了。。。不过还好，这种情况也不是经常遇到 查看log 的话 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;var&#x2F;log&#x2F;docker</span><br></pre></td></tr></table></figure> ## 使用 1. 下载一个image 命令为： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure> 2. 从一个image启动一个container 命令为： <figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">docker run -v localdir:containerport -<span class="selector-tag">p</span> localport:containerport -it  ubuntu:wy</span><br></pre></td></tr></table></figure> 3. 查看所有container： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p>
<ol start="4" type="1">
<li><p>启动一个关闭了的container： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker start id</span><br></pre></td></tr></table></figure></p></li>
<li><p>交互连接一个启动了的contaner <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker attach id</span><br></pre></td></tr></table></figure></p></li>
<li><p>后台运行一个attach中的container 按ctrl p q</p></li>
<li><p>查看所有 image <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></p></li>
<li><p>关闭一个container <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker stop id</span><br></pre></td></tr></table></figure></p></li>
<li><p>删除container <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rm id</span><br><span class="line">或</span><br><span class="line">docker rm $(docker ps -a -q)</span><br><span class="line">删除所有container</span><br></pre></td></tr></table></figure></p></li>
<li><p>删除 image <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker rmi image_id</span><br></pre></td></tr></table></figure></p></li>
<li><p>保存修改过的docker container <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker commit id ubuntu:wy</span><br></pre></td></tr></table></figure> 12 push docker 到自己的仓库里 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker tag ubuntu:wy xfdywy:ubuntu</span><br><span class="line">docker images</span><br><span class="line">docker push xfdywy:ubuntu</span><br></pre></td></tr></table></figure></p></li>
<li><p>docker 查看container log <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker logs -f id</span><br></pre></td></tr></table></figure> ## 遇到的坑 docker in docker 坑太大，放弃</p></li>
</ol>
<h1 id="nginx">nginx</h1>
<p>这个是个非常给力的反向代理和web服务器。这里既然说是和，就是说他有两个功能，这里重点放在前者，反向代理。 web服务器就有点类似apache，大概是个同层次的概念吧。 反向代理意思就是，部署在服务器端，nginx 作为服务器上的代理人，当用户请求的时候，先经过nginx，再由nginx跟真正的服务器上的资源交流。</p>
<p>先说说为什么要搞nginx，因为服务器对外网就开放了一个端口，比如是80吧，那么如果我要有很多服务，比如我架了个blog在81端口，又架了个网盘在82 端口，又架了个别的什么在83端口，就很麻烦了，因为只有一个端口可以外网访问。有了nginx，我们都先请求到nginx，例如都请求到 服务器ip:80 , 然后再由nginx来判断应该把这个请求发送到那个真正的端口上。判断的标准就是用户使用什么url来访问，例如blog.test.com 就解析到81端口，pan.test.com就解析到82端口。由于80端口是开放的，所以我们设置dns服务器，让这三个url都解析到服务器ip:80 之后的工作就可以交给nginx了。</p>
<h2 id="安装">安装</h2>
<p>nginx的安装也很简单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;yum.repos.d&#x2F;nginx.repo</span><br></pre></td></tr></table></figure>
<p>添加以下内容 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[nginx]</span><br><span class="line">name&#x3D;nginx repo</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;nginx.org&#x2F;packages&#x2F;centos&#x2F;$releasever&#x2F;$basearch&#x2F;</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br></pre></td></tr></table></figure> 之后 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install nginx -y</span><br></pre></td></tr></table></figure> 启动服务</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">service nginx start</span><br></pre></td></tr></table></figure>
<p>查看状态</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">service nginx status</span><br></pre></td></tr></table></figure>
<p>查看端口 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsof -i:80</span><br><span class="line"></span><br><span class="line">netstat -anp|grep 80 </span><br></pre></td></tr></table></figure></p>
<p>一些文件地址：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">#Nginx服务器的配置文件</span><br><span class="line">/etc/nginx/nginx<span class="selector-class">.conf</span> </span><br><span class="line"></span><br><span class="line">#Nginx虚拟机文件夹，定义的虚拟机放在此目录下</span><br><span class="line">/etc/nginx/conf<span class="selector-class">.d</span> </span><br><span class="line"> </span><br><span class="line">/etc/nginx/conf.d/default.conf</span><br><span class="line"></span><br><span class="line"># Nginx log</span><br><span class="line">/var/log/nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2>
<p>下面是我自己的配置，通过这个配置，可以实现， 用户 用aaa.com 访问的时候，实际上访问的是 http://xx.xx.xx.xx:60001 ，用bbb.com访问的时候，实际访问的是 http://xx.xx.xx.xx:10080 只需要在dns解析的时候设置 aaa.com 和 bbb.com 都解析到 你的服务器ip:80 就ok了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80 default_server;</span><br><span class="line">    listen       [::]:80  default_server;</span><br><span class="line">    server_name  aaa.com;</span><br><span class="line"></span><br><span class="line">    root         /var/www/html/;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://xx.xx.xx.xx:60001;</span><br><span class="line">            proxy_redirect default;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">error_page 404 /404.html;</span><br><span class="line">    location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">error_page 500 502 503 504 /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 8080 ;</span><br><span class="line">    server_name bbb.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">    proxy_pass http://xx.xx.xx.xx:10080;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="遇到的坑">遇到的坑</h2>
<p>如果出现 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx:connect() to 127.0.0.1:5601 failed (13: Permission denied) while connecting to upstream</span><br></pre></td></tr></table></figure> 请查看 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># getenforce</span><br><span class="line">Enforcing</span><br></pre></td></tr></table></figure> 如果是上面这个结果,一般都是selinux权限的问题。selinux 的坑比较多。一般如果配置都配置好了，还算是出现错误的话，可以往附近考虑。一般都是访问权限的问题。可以有两种解决办法，一种是直接把selinux 给关了。一种是把文件的权限设置一下。参selinux考 &gt; http://cn.linux.vbird.org/linux_basic/0440processcontrol_5.php</p>
<p>第一种做法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">setenforce <span class="number">0</span></span><br><span class="line">sed -<span class="selector-tag">i</span> <span class="string">&#x27;s/enforcing$/disabled/g&#x27;</span> /etc/selinux/config</span><br></pre></td></tr></table></figure>
<p>第二种做法</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#chcon</span> -R -t httpd_sys_content_t /your/file/paht</span><br><span class="line"> </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>web</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>vnc 连接服务器</title>
    <url>/2018/04/23/1/</url>
    <content><![CDATA[<p>vnc 连接服务器 使用 Xfce desktop tab 键不能自动补全 这是因为tab键被系统默认为是 switch window的快捷键了，修改了就好了</p>
<!--  more -->
<blockquote>
<p>Application Menu &gt; Settings &gt; Window Manager 选择 Keyboard 标签 清除 Switch window 的快捷键设置</p>
</blockquote>
<p>vnc 连接服务器 使用xfce desktop 系统时间，桌面切换等图标没有靠右，类似于windows右下键的时间状态栏等，看起来很难受。设置方法为： &gt; 面板空白处右击 &gt; panel &gt; panel preferences &gt; items &gt; 点右边的加号，新建一个separator（分隔符），选中新建的separator，用上下按钮调整位置，分隔符后面的都靠右 &gt; 双击 separator，保证 设置成expand &gt; 完成， 最终设置大概是这样 &gt; <img data-src="https://img-1253424161.cos.ap-shanghai.myqcloud.com/xsj/2018/4/1523849612319.jpg" alt="vnc panel" /></p>
]]></content>
      <tags>
        <tag>vnc</tag>
        <tag>tab</tag>
        <tag>xfce</tag>
        <tag>自动补全</tag>
        <tag>状态栏</tag>
      </tags>
  </entry>
  <entry>
    <title>redhat6.2相关配置（yum，r，rstudio，ipythonnotebook）</title>
    <url>/2016/04/01/1/</url>
    <content><![CDATA[<p>菜鸟历经多次失败，多次尝试，百度了n次，谷歌了n次之后，终于搞定了一系列的配置。太浪费时间了。。。必须记录下载，以后就方便了。</p>
<p>#一些操作： 查看端口占用 netstat -tunlp |grep 22 卸载 自己编译的软件 make uninstall 查询版本号 uname -a</p>
<p>#安装yum：</p>
<p>见下文详解转载自</p>
<blockquote>
<p>http://blog.csdn.net/zcyhappy1314/article/details/17580943</p>
</blockquote>
<p>#配置epel 利用这个链接选择符合版本号的epel &gt;https://fedoraproject.org/wiki/EPEL/zh-cn</p>
<p>之后下载安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http:&#x2F;&#x2F;mirrors.yun-idc.com&#x2F;epel&#x2F;6&#x2F;i386&#x2F;epel-release-6-8.noarch.rpm</span><br><span class="line"></span><br><span class="line">rpm -ivh epel-release-6-8.noarch.rpm </span><br></pre></td></tr></table></figure>
<p>#安装R</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install R</span><br><span class="line"></span><br><span class="line">tar vxzf R-3.2.2.tar.gz</span><br><span class="line"></span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;home&#x2F;rstudio&#x2F;R --with-readline&#x3D;yes --with-libpng&#x3D;yes --with-x&#x3D;no --enable-R-shlib</span><br><span class="line"></span><br><span class="line">make </span><br><span class="line"></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">ln -s &#x2F;home&#x2F;rstudio&#x2F;R&#x2F;bin&#x2F;R &#x2F;usr&#x2F;local&#x2F;bin&#x2F;R</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>#安装rstudio</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;download2.rstudio.org&#x2F;rstudio-server-rhel-0.99.893-x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum install --nogpgcheck rstudio-server-rhel-0.99.893-x86_64.rpm</span><br><span class="line"></span><br><span class="line"> rstudio-server verify-installation</span><br></pre></td></tr></table></figure>
<p>#配置ipython notebook 见下文，转载自</p>
<blockquote>
<p>http://mindonmind.github.io/2013/02/08/ipython-notebook-interactive-computing-new-era/</p>
</blockquote>
<p>jupyter 配置文件最终应如下： jupyter_notebook_config.py</p>
<p>c = get_config() c = get_config()</p>
<p>c.IPKernelApp.pylab = 'inline'<br />
c.NotebookApp.ip = '<em>' c.NotebookApp.open_browser = False c.NotebookApp.password = u'sha1:8e71ef9</em>*****3bad'</p>
<p>c.NotebookApp.port = 9999</p>
<p>##安装yum</p>
<blockquote>
<p>YUM是Redhat Linux在线安装更新及软件的工具，但是这 是RHEL5的收费功能，如果没有购买Redhat的服务时不能使用RHEL5的更新源的，会提示注册。 由于CentOS是从Redhat演化而来的免费Linux版本，因此可以利用CentOS的yum更新源来实现RHEL5的YUM功能。配置方法如下： 检查yum是否安装，默认情况下都是安装好的，总共4各包。 [root@linux-a ~]# rpm -qa |grep yum yum-metadata-parser-1.0-8.fc6 yum-3.0.1-5.el5 yum-rhn-plugin-0.4.3-1.el5 yum-updatesd-3.0.1-5.el5 1、卸载掉系统redhat自带的yum rpm -qa |grep yum |xargs rpm -e --nodeps</p>
<p>2 下载相关的centos yum插件 主要有python-iniparse-0.3.1-2.1.el6.noarch.rpm yum-3.2.29-40.el6.centos.noarch.rpm yum-metadata-parser-1.1.2-16.el6.x86_64.rpm yum-plugin-fastestmirror-1.1.30-14.el6.noarch.rpm</p>
<p>其中版本号和安装的系统版本，以及是32位系统和64位系统有关系，可根据实际情况，自行调整下载路径<br />
下载地址：http://mirrors.163.com/centos/</p>
<p>在linux可以使用命令直接下载到本地也可以 wget http://mirrors.163.com/centos/6/os/i386/Packages/python-iniparse-0.3.1-2.1.el6.noarch.rpm wget http://mirrors.163.com/centos/6/os/i386/Packages/yum-metadata-parser-1.1.2-16.el6.i686.rpm wget http://mirrors.163.com/centos/6/os/i386/Packages/yum-3.2.29-40.el6.centos.noarch.rpm wget http://mirrors.163.com/centos/6/os/i386/Packages/yum-plugin-fastestmirror-1.1.30-14.el6.noarch.rpm 注意：如果下载不了可能是小版本号有变化，可以直接下载后在上传到linux服务器或者到http://mirrors.163.com/centos/6/os/i386/Packages/ 页面按照上述 rpm 的开头搜索具体的名称即可。</p>
<p>3 安装下载的yum包（如果没权限可以先修改权限 chmod 777 *）</p>
<p>rpm -ivh python-iniparse-0.3.1-2.1.el6.noarch.rpm rpm -ivh yum-metadata-parser-1.1.2-16.el6.i686.rpm rpm -ivh yum-3.2.29-40.el6.centos.noarch.rpm yum-plugin-fastestmirror-1.1.30-14.el6.noarch.rpm</p>
<p>最后两个需要一起安装，有相互依赖关系</p>
<p>4 下载配置文件CentOS6-Base-163.repo wget http://mirrors.163.com/.help/CentOS6-Base-163.repo</p>
<p>5 修改CentOS6-Base-163.repo ，将其中的<span class="math inline">\(releasever 更改为centos的版本 vi CentOS6-Base-163.repo（使用 vi 命令编辑文件） ：%s/\)</span>releasever/6 （在 vi 命令模式下执行上述命令）</p>
<p>6 把配置文件放到指定目录 并且删除原来的配置文件 cd /etc/yum.repos.d rm -fr * mv /home/CentOS6-Base-163.repo ./</p>
<p>7 清除缓存 yum clean all</p>
<p>8 配置获取yum列表 yum makecache</p>
</blockquote>
<p>##配置ipythonnotebook远程访问</p>
<blockquote>
<p>首先创建一个名为 nbserver 的配置文件 3：</p>
<p>ipython profile create nbserver 设置登陆密码：</p>
<p>IN [1]: from IPython.lib import passwd IN [2]: passwd() Enter password: Verify password: Out[2]: 'sha1:xxxxxxxxxxxxxxxxxxxxxxxxx' 创建私人证书：</p>
<p>openssl req -x509 -nodes -days 10000 -newkey rsa:1024 -keyout mycert.pem -out mycert.pem 进入 nbserver 配置文件所在目录 4 并打开 ipython_notebook_config.py，设置以下属性：</p>
<p>c = get_config()</p>
<p>c.IPKernerlApp.pylab = 'inline' c.NotebookApp.ip = '*' c.NotebookApp.open_browser = False c.NotebookApp.password = u'sha1:xxxx your hashed password' c.Notebook.App.port = 9999<br />
可设为其他端口 为使 Notebook 正常工作，需在防火墙中打开上面设置的端口。可以编辑 /etc/sysconfig/iptables，在最后一条 REJECT 语句前加入：</p>
<p>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 9999 -j ACCEPT -A OUTPUT -m state --state NEW -m tcp -p tcp --dport 9999 -j ACCEPT 用下面这条命令运行服务端：</p>
<p>ipython notebook --profile=nbserver --certfile=/path/to/your/mycert.pem 在本地计算机中打开浏览器，输入</p>
<p>https://ip/of/your/server:9999 即可打开客户端。</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>yum</tag>
        <tag>r</tag>
        <tag>rstudio</tag>
        <tag>ipythonnotebook</tag>
        <tag>redhat 6.2</tag>
      </tags>
  </entry>
  <entry>
    <title>Concentration Inequality(集中不等式)</title>
    <url>/2018/05/21/1/</url>
    <content><![CDATA[<p><strong><a href="/2020/04/17/1/">[更新啦，来这里看吧，终于把所有内容都写全了，各个不等式的形式还有他们之间的关联讨论等等]</a></strong></p>
<p>Concentration inequality 刻画了一组随机变量的和（或者样本平均数）与其期望值的偏离程度，在算法收敛性分析过程中是非常有用的一类不等式。</p>
<!--  more -->
<p>这次主要总结一下最近一段时间遇到的集中不等式，不仅是不等式形式，而是不等式之间的相互关系的归纳总结，包括：</p>
<ul>
<li>Markov's inequality</li>
<li>Chebyshev's inequality</li>
<li>Chernoff bounds</li>
<li>Hoeffding's inequality</li>
<li>Bennett's inequality</li>
<li>Bernstein's inequalities</li>
<li>Azuma's inequality</li>
<li>Doob's martingale inequality</li>
</ul>
<h1 id="markovs-inequality">Markov's inequality</h1>
<h2 id="条件">条件：</h2>
<blockquote>
<p>X 是非负随机变量, a&gt;0</p>
</blockquote>
<h2 id="公式">公式：</h2>
<blockquote>
<p><span class="math display">\[ \operatorname{P}(X \geq a) \leq \frac{\operatorname{E}(X)}{a} \]</span></p>
</blockquote>
<h2 id="直观">直观：</h2>
<p>一个随机变量的取值大于a的概率要小于其期望值除以a。直观很简单就是，假设10个人的平均工资是1块钱，那么如果超过2两个人的工资超过5块钱了，那么哪怕剩下来的人没有工资，这10个人的工资平均也超过1块钱了. 这里大家的工资就是随机变量X, a就是5， E(x)就是1， <span class="math inline">\(P(X \le a)\)</span> 就是0.2</p>
<h2 id="变形">变形</h2>
<p>Markov's inequality 最简单，也最“松”，只用到了随机变量的期望信息。</p>
<p>这里“松”是指，对于相同的a，我们求出来的概率最小，或者要求相同的概率，得到的a最大（不必要）。</p>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>Concentration Inequality</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器升级记录</title>
    <url>/2018/04/25/1/</url>
    <content><![CDATA[<p>最近学校的服务器被信息中心检测出来有很多高危漏洞，给了个通知限期整改。 主要修改了 openssh vnc apache mysql 记录如下：</p>
<p><!--  more --></p>
<h1 id="openssh">openssh</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://mirrors.syringanetworks.net/pub/OpenBSD/OpenSSH/portable/openssh-7.5p1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssh-7.5p1 </span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --with-md5-passwords --with-pam --with-zlib --with-openssl-includes=/usr --with-privsep-path=/var/lib/sshd </span><br><span class="line">make </span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h2 id="一些辅助工作">一些辅助工作</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">install -v -m755    contrib/ssh-copy-id /usr/bin </span><br><span class="line">install -v -m644    contrib/ssh-copy-id.1 /usr/share/man/man1 </span><br><span class="line">install -v -m755 -d /usr/share/doc/openssh-7.5p1 </span><br><span class="line">install -v -m644    INSTALL LICENCE OVERVIEW README* /usr/share/doc/openssh-7.5p1 </span><br><span class="line"></span><br><span class="line">cp -p contrib/RedHat/sshd.init /etc/init.d/sshd </span><br><span class="line">chmod +x /etc/init.d/sshd </span><br></pre></td></tr></table></figure>
<h2 id="修改-ssh的配置">修改 ssh的配置</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PermitRootLogin yes&quot;</span> &gt;&gt; /etc/ssh/sshd_config</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;X11Forwarding yes&#x27;</span> &gt;&gt; /etc/ssh/sshd_config </span><br><span class="line">或者直接进去修改</span><br><span class="line">vim /etc/ssh/sshd_config </span><br></pre></td></tr></table></figure>
<h2 id="启动和开机启动">启动和开机启动</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br><span class="line">chkconfig --add sshd</span><br><span class="line">chkconfig sshd on</span><br><span class="line">chkconfig --list |grep sshd</span><br></pre></td></tr></table></figure>
<p>大功告成</p>
<h1 id="vnc">vnc</h1>
<p>关闭就ok了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">service vncserver stop</span><br></pre></td></tr></table></figure>
<h1 id="apache-httpd">apache httpd</h1>
<p>将旧版本的httpd 升级到2.4.33</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://ftp.tsukuba.wide.ad.jp/software/apache//apr/apr-1.6.3.tar.gz</span><br><span class="line">wget http://ftp.yz.yamagata-u.ac.jp/pub/network/apache//apr/apr-util-1.6.1.tar.gz</span><br><span class="line">tar xzvf apr-1.6.3.tar.gz</span><br><span class="line">mv apr-1.6.3 httpd-2.4.33/srclib/apr</span><br><span class="line">tar xzvf apr-util-1.6.1.tar.gz </span><br><span class="line">mv apr-util-1.6.1 httpd-2.4.33/srclib/apr-util</span><br><span class="line">cd httpd-2.4.33</span><br><span class="line">./configure --prefix=/usr/local/httpd24 --enable-so --enable-ssl --enable-cgi --enable-rewrite --with-zlib --with-pcre --with-included-apr  --enable-modules=most --enable-mpms-shared=all --with-mpm=prefork</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cp /usr/local/httpd24/bin/apachectl  /etc/init.d/httpd24</span><br><span class="line">service httpd24 restart</span><br></pre></td></tr></table></figure>
<h2 id="设置开机启动">设置开机启动</h2>
<p>vim 打开 /etc/init.d/httpd24 , 然后再第二行加上下面这两行 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># chkconfig:   2345 90 10</span><br><span class="line"></span><br><span class="line"># description:  myservice</span><br></pre></td></tr></table></figure> 之后 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chkconfig --add httpd24</span><br><span class="line">chkconfig  httpd24 on  </span><br><span class="line">chkconfig --list </span><br></pre></td></tr></table></figure> ## 遇到的坑 &gt; httpd: Could not reliably determine the server's fully qualified domain name, using 127.0.0.1 for ServerName</p>
<p>在安装目录下找到httpd.conf(我这里就是/usr/local/httpd24/conf/httpd.conf )，把ServerName www.example.com:80 前面的#去掉再重启就ok了。</p>
<h1 id="mysql">mysql</h1>
<p>将旧版本的mysql升级到8.0版本，参照<a href="https://www.if-not-true-then-false.com/2010/install-mysql-on-fedora-centos-red-hat-rhel/">该处</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum localinstall https:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el6-11.noarch.rpm</span><br><span class="line">yum --enablerepo&#x3D;mysql80-community install mysql-community-server</span><br><span class="line">service mysqld start</span><br><span class="line">chkconfig --levels 235 mysqld on</span><br></pre></td></tr></table></figure>
<p>之后就是配置mysql数据库了，注意到在执行 service mysqld start 的时候。屏幕上会显示出一个临时的root 密码 &gt;A temporary password is generated for root@localhost: V9R.Blr:baQH</p>
<p>用这个密码登录后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;root123&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果出现 &gt;ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</p>
<p>说明密码太简单不符合要求，设置一本复杂的就行。如果实在嫌麻烦，先修改后，输入这样的代码先查看进行密码检查的变量，再根据需要修改这些变量。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;validate_password%&#x27;</span>; </span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> validate_password_length<span class="operator">=</span><span class="number">3</span>;  </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>vnc</tag>
        <tag>openssh</tag>
        <tag>mysql</tag>
        <tag>apache httpd</tag>
      </tags>
  </entry>
  <entry>
    <title>查看linux文件大小等文件相关操作</title>
    <url>/2018/04/24/1/</url>
    <content><![CDATA[<!--  more -->
<p>查看各个“盘”使用大小，总大小等 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure> 这里， -h 表示用k，m，g等单位显示大小信息，方便查看 查看文件夹已使用大小</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">du -h --max-depth=1</span><br></pre></td></tr></table></figure>
<p>这里， -h 同上， --max-depth 表示显示目录的层级最深是多少层</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls</span><br><span class="line">ll</span><br></pre></td></tr></table></figure>
<p>查看当前目录下的文件和文件夹，及相关信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp file dir</span><br><span class="line">\cp -f file dir</span><br><span class="line"></span><br><span class="line">cp -r dir dir</span><br><span class="line">\cp -rf dir dir</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>如果需要覆盖目标文件夹里面的文件，并且没有提示，需要用第二种方法，否则哪怕加了<code>-f</code> 系统也会提示是否覆盖。这是因为系统一般都会配置别名，你输入的是<code>cp</code>,但是实际上执行的是<code>cp -i</code> 所以无论如何也会有覆盖提示了。 如果需要复制整个文件夹及里面的文件，需要用 <code>-r</code>,同理，如果要强制覆盖，也需要在cp前面加斜杠。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Concentration Inequality(集中不等式)更新版</title>
    <url>/2020/04/17/1/</url>
    <content><![CDATA[<p>Concentration inequality 刻画了一组随机变量的和（或者样本平均数）与其期望值的偏离程度，在算法收敛性分析过程中是非常有用的一类不等式。</p>
<span id="more"></span>
<p>这次主要总结一下最近一段时间遇到的集中不等式，不仅是不等式形式，也有不等式之间的相互关系的归纳总结，包括：</p>
<ul>
<li><a href="#markovs-inequality">Markov's inequality</a>
<ul>
<li><a href="#条件">条件：</a></li>
<li><a href="#公式">公式：</a></li>
<li><a href="#直观与讨论">直观与讨论：</a></li>
</ul></li>
<li><a href="#chebyshevs-inequality">Chebyshev's inequality</a>
<ul>
<li><a href="#条件-1">条件</a></li>
<li><a href="#公式-1">公式</a></li>
<li><a href="#直观与讨论-1">直观与讨论</a></li>
</ul></li>
<li><a href="#chernoff-bounds">Chernoff bounds</a>
<ul>
<li><a href="#条件-2">条件</a></li>
<li><a href="#公式-2">公式</a></li>
<li><a href="#直观与讨论-2">直观与讨论</a></li>
</ul></li>
<li><a href="#hoeffdings-inequality">Hoeffding's inequality</a>
<ul>
<li><a href="#条件-3">条件</a></li>
<li><a href="#公式-3">公式</a></li>
<li><a href="#直观与讨论-3">直观与讨论</a></li>
</ul></li>
<li><a href="#weighted-hoeffding-inequality">Weighted Hoeffding Inequality</a>
<ul>
<li><a href="#条件-4">条件</a></li>
<li><a href="#公式-4">公式</a></li>
<li><a href="#直观与讨论-4">直观与讨论</a></li>
</ul></li>
<li><a href="#bennetts-inequality">Bennett's inequality</a>
<ul>
<li><a href="#条件-5">条件</a></li>
<li><a href="#公式-5">公式</a></li>
<li><a href="#直观与讨论-5">直观与讨论</a></li>
</ul></li>
<li><a href="#bernsteins-inequalities">Bernstein's inequalities</a>
<ul>
<li><a href="#条件-6">条件</a></li>
<li><a href="#公式-6">公式</a></li>
<li><a href="#直观与讨论-6">直观与讨论</a></li>
</ul></li>
<li><a href="#azumas-inequality">Azuma's inequality</a>
<ul>
<li><a href="#条件-7">条件</a></li>
<li><a href="#公式-7">公式</a></li>
<li><a href="#直观与讨论-7">直观与讨论</a></li>
</ul></li>
<li><a href="#doobs-martingale-inequality">Doob's martingale inequality</a>
<ul>
<li><a href="#条件-8">条件</a></li>
<li><a href="#公式-8">公式</a></li>
<li><a href="#直观与讨论-8">直观与讨论</a></li>
</ul></li>
<li><a href="#整体讨论">整体讨论</a></li>
</ul>
<h1 id="markovs-inequality">Markov's inequality</h1>
<h2 id="条件">条件：</h2>
<blockquote>
<p>X 是非负随机变量, a&gt;0</p>
</blockquote>
<h2 id="公式">公式：</h2>
<blockquote>
<p><span class="math display">\[ \operatorname{P}(X \geq a) \leq \frac{\operatorname{E}(X)}{a} \]</span></p>
</blockquote>
<h2 id="直观与讨论">直观与讨论：</h2>
<p>一个随机变量的取值大于a的概率要小于其期望值除以a。直观很简单就是，假设10个人的平均工资是1块钱，那么如果超过2两个人的工资超过5块钱了，那么哪怕剩下来的人没有工资，这10个人的工资平均也超过1块钱了. 这里大家的工资就是随机变量X, a就是5， E(x)就是1， <span class="math inline">\(P(X \le a)\)</span> 就是0.2</p>
<p>Markov's inequality 最简单，也最“松”，只用到了随机变量的期望信息。 这里“松”是指，对于相同的a，我们求出来的概率最小，或者要求相同的概率，得到的a最大（不必要）。</p>
<h1 id="chebyshevs-inequality">Chebyshev's inequality</h1>
<h2 id="条件-1">条件</h2>
<blockquote>
<p><span class="math inline">\(X\)</span> 为均值为<span class="math inline">\(\mu\)</span>， 方差为<span class="math inline">\(\sigma^2\)</span> 的随机变量, 任意实数<span class="math inline">\(k\)</span></p>
</blockquote>
<h2 id="公式-1">公式</h2>
<blockquote>
<p><span class="math display">\[ P(|X-\mu|\ge k\sigma)\le \frac{1}{k^2} \]</span></p>
</blockquote>
<h2 id="直观与讨论-1">直观与讨论</h2>
<p>Chebyshev 不等式刻画了一个随机变量偏离其均值的概率。直观来说就是离均值越远，概率越小，并且小的速率收到方差的控制。由于Chebyshev不等式不依赖分布的具体信息，只依赖一阶矩和二阶矩，因此应用广泛。</p>
<p>Chebyshev不等式通过考虑方差和期望的信息， 比markov不等式更加细致。</p>
<h1 id="chernoff-bounds">Chernoff bounds</h1>
<h2 id="条件-2">条件</h2>
<blockquote>
<p><span class="math inline">\(X\)</span> 是n个独立随机变量 <span class="math inline">\(x_1, \cdots , x_n\)</span> 的和， <span class="math inline">\(t\)</span>是任意大于0的实数</p>
</blockquote>
<h2 id="公式-2">公式</h2>
<blockquote>
<p><span class="math display">\[ P(x_i&gt;a)=P(e^{t x_i}&gt;e^{ta}) \le e^{-ta}E[ e^{tX}] \]</span> <span class="math display">\[ P(X&gt;a) \le e^{-ta}E[\Pi_i e^{tx_i}] \]</span> <span class="math display">\[ P(X&gt;a) \le min_{t&gt;0}\left[ e^{-ta}E[\Pi_i e^{tx_i}] \right] \]</span></p>
</blockquote>
<h2 id="直观与讨论-2">直观与讨论</h2>
<p>Chernoff 算是一个技巧，本质上是Markov不等式的直接应用。如看上文公式中的第一个式子，左边的等号就是Chernoff的核心技巧，即将随机变量转化成指数的形式，并且引入一个新的参数<span class="math inline">\(t\)</span>，右边的<span class="math inline">\(\le\)</span>就是直接应用了Markov不等式。</p>
<p>下面可以看到Chernoff的技巧是得到 Hoeffding不等式的关键。简单来说，Hoeffding不等式是Chernoff的应用。</p>
<h1 id="hoeffdings-inequality">Hoeffding's inequality</h1>
<h2 id="条件-3">条件</h2>
<blockquote>
<p><span class="math inline">\(x_i, \cdots, x_n\)</span> 是一族独立的随机变量，且 <span class="math inline">\(a_i&lt; x_i &lt; b_i\)</span>, <span class="math inline">\(\bar{X} = \frac{1}{n}(x_1 + \cdots + c_n)\)</span></p>
</blockquote>
<h2 id="公式-3">公式</h2>
<blockquote>
<p><span class="math display">\[ P(\bar{x} - E[\bar{x}]\ge t) \le exp\left( -\frac{2n^2t^2}{\sum_{i=1}^n (b_i-a_i)^2} \right)\]</span></p>
</blockquote>
<h2 id="直观与讨论-3">直观与讨论</h2>
<p>Hoeffding 不等式刻画了一族随机变量的和偏离其期望的概率。只要求随机变量独立且有界，对随机变量的分布和各阶矩没有任何要求，并且这些随机变量可以不同分布。</p>
<p>Hoeffding不等式在机器学习算法的收敛性证明中起到了非常重要的作用，尤其是需要刻画算法的输出在多大概率的意义下可以收敛到我们希望的结果中这一情况下，我们可以利用hoeffding 不等式得到随机算法输出的结果与其期望结果的关系，从而得到想要的高概率界。</p>
<h1 id="weighted-hoeffding-inequality">Weighted Hoeffding Inequality</h1>
<h2 id="条件-4">条件</h2>
<blockquote>
<p><span class="math inline">\(x_i, \cdots, x_n\)</span> 是一族独立的随机变量，且 <span class="math inline">\(a_i&lt; x_i &lt; b_i\)</span>, <span class="math inline">\(\bar{X} = \frac{1}{n}(w_1x_1 + \cdots + w_nx_n)\)</span></p>
</blockquote>
<h2 id="公式-4">公式</h2>
<blockquote>
<p><span class="math display">\[ P(\bar{x} - E[\bar{x}]\ge t) \le exp\left( -\frac{2n^2t^2}{\sum_{i=1}^n w_i^2(b_i-a_i)^2} \right)\]</span></p>
</blockquote>
<h2 id="直观与讨论-4">直观与讨论</h2>
<p>与简单的Hoeffding 不等式类似，唯一区别在于是加权平均数。</p>
<h1 id="bennetts-inequality">Bennett's inequality</h1>
<h2 id="条件-5">条件</h2>
<blockquote>
<p><span class="math inline">\(x_i, \cdots, x_n\)</span> 是一族独立的随机变量，且 <span class="math inline">\(a_i&lt; x_i &lt; b_i\)</span>, <span class="math inline">\(b_i-a_i=c_i \le C\)</span>, <span class="math inline">\(\bar{X} = \frac{1}{n}( x_1 + \cdots + x_n)\)</span> , <span class="math inline">\(\sigma^2 = \sum_{i=1}^nE[x_i^2]\)</span>, t为任意实数</p>
</blockquote>
<h2 id="公式-5">公式</h2>
<blockquote>
<p><span class="math display">\[ P(\bar{X} -E[\bar{X}] \ge t) \le exp\left( -\frac{\sigma^2}{C^2} h(\frac{Ct}{n\sigma^2})\right)\]</span><br />
<span class="math display">\[ h(u) = (1+u)log(1+u) - u \]</span></p>
</blockquote>
<h2 id="直观与讨论-5">直观与讨论</h2>
<p>因为利用了方差的信息，这个界更加细致。</p>
<h1 id="bernsteins-inequalities">Bernstein's inequalities</h1>
<h2 id="条件-6">条件</h2>
<blockquote>
<p><span class="math inline">\(x_i, \cdots, x_n\)</span> 是一族独立的随机变量，且 <span class="math inline">\(a_i&lt; x_i &lt; b_i\)</span>, <span class="math inline">\(b_i-a_i=c_i \le C\)</span>, <span class="math inline">\(\bar{X} = \frac{1}{n}(x_1 + \cdots + c_n)\)</span> , <span class="math inline">\(\sigma^2 = \sum_{i=1}^nE[x_i^2]\)</span>, t为任意实数</p>
</blockquote>
<h2 id="公式-6">公式</h2>
<blockquote>
<p><span class="math display">\[ P(\bar{X} -E[\bar{X}] \ge t) \le exp\left( -\frac{t^2/2 }{n^2\sigma^2 +  Ctn/3} \right)\]</span></p>
</blockquote>
<h2 id="直观与讨论-6">直观与讨论</h2>
<p>将Bennett不等式中的h函数用更松的形式代换, 可以证明这个不等式。</p>
<p><span class="math display">\[h(u)\ge \frac{u^2}{2+2u/3}\]</span></p>
<p>在Bernstein不等式中，我们可以看到，如果方差较小， 相同n和t的时候， 不等号右侧的概率值相比hoeffding不等式要小，说明Bernstein不等式通过考虑方差信息，获得了更加精细的结果。</p>
<h1 id="azumas-inequality">Azuma's inequality</h1>
<p>前面讨论的一些不等式都要求随机变量独立，Azuma不等式研究的随机变量序列可以有相关性</p>
<h2 id="条件-7">条件</h2>
<blockquote>
<p><span class="math inline">\(x_i, \cdots, x_n\)</span> 是一族鞅序列，，且 <span class="math inline">\(| x_i - x{i-1} | &lt; c_i\)</span>, t为任意实数</p>
</blockquote>
<p>鞅指的是满足如下两个条件的随机过程 <span class="math display">\[E[|x_n|] &lt;\infty\]</span> <span class="math display">\[E[x_{n+1}|x_1, \cdots x_n]=x_n\]</span></p>
<h2 id="公式-7">公式</h2>
<blockquote>
<p><span class="math display">\[ P(x_N-x_0 \ge t) \le exp\left( -\frac{t^2  }{2\sum_{i=1}^Nc_i^2 } \right)\]</span></p>
</blockquote>
<h2 id="直观与讨论-7">直观与讨论</h2>
<p>如果将鞅序列拆分成鞅差序列， 即令<span class="math inline">\(y_i = x_i - x_{i-1}\)</span>, 那么<span class="math inline">\(y_i\)</span>满足如下两条，为鞅差序列 <span class="math display">\[E[|x_n|] &lt;\infty\]</span> <span class="math display">\[E[x_{n+1}|\mathcal{F}_n]=0\]</span></p>
<p>则<span class="math inline">\(x_n-x_0 = \sum_{i=1}^N y_i\)</span>Azuma不等式可以看成鞅差序列的和偏离0的概率</p>
<h1 id="doobs-martingale-inequality">Doob's martingale inequality</h1>
<h2 id="条件-8">条件</h2>
<blockquote>
<p><span class="math inline">\(x\)</span>是上鞅，即对任意两个时刻<span class="math inline">\(s&lt;t\)</span>， <span class="math inline">\(x_s \le E[x_t|\mathcal{F_s}]\)</span></p>
</blockquote>
<h2 id="公式-8">公式</h2>
<blockquote>
<p><span class="math display">\[ P(\sup_{0\le t \le T}x_t \ge C) \le  \frac{E[\max(x_T,0)]}{C}\]</span></p>
</blockquote>
<h2 id="直观与讨论-8">直观与讨论</h2>
<p>这个不等式讨论了上鞅序列在路径中的表现，即如果我们知道上鞅序列<span class="math inline">\(X_t\)</span>在最后<span class="math inline">\(T\)</span>时刻的表现，我们就能大概推测出在整个0到T时刻之间随机变量<span class="math inline">\(x_t\)</span>大于某个值的概率。</p>
<h1 id="整体讨论">整体讨论</h1>
<p>上述讨论的公式形式比较单一，都是描述随机变量或者随机变量的和偏离其中心的概率值的大小。但是实际上我们根据上文中的结果，可以很容易的推导出其他变形形式。</p>
<p>用Heoffding不等式举例，我们还可以有以下结果:</p>
<ol type="1">
<li>当样本量为n的时候，以至少<span class="math inline">\(1-\delta\)</span>的结果，我们可以有如下</li>
</ol>
<p><span class="math display">\[ E[\bar{X} ] - \bar{X} \le \sqrt{\frac{\sum_{i=1}^n(b_i-a_i)^2\ln\frac{1}{\delta }}{2n^2}}\]</span></p>
<ol start="2" type="1">
<li>同理，如果我们需要以至少<span class="math inline">\(1-\delta\)</span>的概率保证差距小于<span class="math inline">\(\epsilon\)</span>，则我们至少需要这么多样本(假设所有的<span class="math inline">\(b_i &lt;b, \ a_i&gt;a\)</span> )</li>
</ol>
<p><span class="math display">\[N = \frac{ (b -a )^2\ln\frac{1}{\delta }}{2\epsilon^2} \]</span></p>
<p>类似这样的结论对于算法的收敛性分析和有限样本表现分析非常有用</p>
<!-- 
|            |                                                                                         |                                                               |                                                                                 |
| ---------- | --------------------------------------------------------------------------------------- | ------------------------------------------------------------- | ------------------------------------------------------------------------------- |
| p          | 1-$\delta$                                                                              | $e^{-\frac{n\epsilon^2}{2\sigma^2 + \frac{14\eta\epsilon}{3}}}$ | 1-$\delta$                                                                      |
| n          | n                                                                                       | n                                                             | $\frac{((2\sigma^2)+\frac{14\eta\epsilon}{3})\ln\frac{1}{\delta} }{\epsilon^2}$ |
| $\epsilon$ | $\sqrt{\frac{2\sigma^2\ln\frac{2}{\delta}}{n}}+\frac{7\eta\ln\frac{2}{\delta}}{3(n-1)}$ | $\epsilon$                                                    | $\epsilon$                                                                      |
|            |                                                                                         |                                                               |                                                                                 |

 
 -->
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>Concentration Inequality</tag>
      </tags>
  </entry>
  <entry>
    <title>分位数回归</title>
    <url>/2020/04/17/2/</url>
    <content><![CDATA[<h1 id="分位数回归的直观">分位数回归的直观</h1>
<p>给定一些样本数据 <span class="math inline">\((x_i, y_i)\)</span>，我们可以理解成 给定一个 <span class="math inline">\(x_i\)</span>, 我们就有一个 <span class="math inline">\(Y_i\)</span> 的分布，<span class="math inline">\(y_i\)</span> 是一个采样出来的样本，被我们所观测。 最小二乘估计是要去拟合 <span class="math inline">\(x\)</span> 和 <span class="math inline">\(mean(Y)\)</span> 之间的关系。 而分位数回归则是要拟合某分位数。</p>
<span id="more"></span>
<figure>
<img data-src="https://img-1253424161.cos.ap-shanghai.myqcloud.com/xsj/2019/12/1575889988287.png" alt="" /><figcaption>分位数回归的结果</figcaption>
</figure>
<h1 id="分位数回归的数学方法">分位数回归的数学方法</h1>
<p>随机变量 <span class="math inline">\(Y\)</span> 的 <span class="math inline">\(\tau\)</span> 分位数 的定义是 <span class="math display">\[ Q_{Y}(\tau)=F_{Y}^{-1}(\tau)=\inf\left\lbrace y:F_{Y}(y)\geq\tau\right\rbrace \]</span></p>
<p>为了简单起见，我们定义如下函数</p>
<p><span class="math display">\[ \rho_{\tau}(y)=y(\tau-\mathbb{I}_{(y&lt;0)}) \]</span></p>
<p>考虑如下最优化问题的最优解 <span class="math inline">\(u^*\)</span></p>
<p><span class="math display">\[ \underset{u}{\min}E(\rho_{\tau}(Y-u))=\underset{u}{\min}\left\lbrace(\tau-1)\int_{-\infty}^{u}(y-u)dF_{Y}(y)+\tau\int_{u}^{\infty}(y-u)dF_{Y}(y)\right\rbrace  \tag{1}\]</span></p>
<p>我们可以通过求导，令导函数等于0，反解出<span class="math inline">\(u^\ast\)</span> ， 可以看到 <span class="math inline">\(F_{Y}( u^\ast)=\tau\)</span></p>
<p>从而，我们可以令 <span class="math inline">\(u = f_w(x)\)</span>, 例如，线性情况下 <span class="math inline">\(u = w\cdot x\)</span>. 从而 公式 (1)的 <span class="math inline">\(min_u\)</span> 变成 <span class="math inline">\(min_w\)</span>就是分位数回归的目标函数了。</p>
<p># 一些参考资料</p>
<p>## 代码 &gt;&gt; http://www.statsmodels.org/dev/examples/notebooks/generated/quantile_regression.html &gt;&gt;</p>
<p>.</p>
]]></content>
      <categories>
        <category>math</category>
      </categories>
      <tags>
        <tag>分位数回归</tag>
      </tags>
  </entry>
  <entry>
    <title>连续时间离散状态马氏链的转移概率矩阵与转移速率矩阵</title>
    <url>/2020/04/09/1/</url>
    <content><![CDATA[
]]></content>
      <tags>
        <tag>马氏链</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World test 2018</title>
    <url>/2016/03/26/1/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<figure>
<img data-src="https://img-1253424161.cos.ap-shanghai.myqcloud.com/test.gif" alt="" /><figcaption>123</figcaption>
</figure>
]]></content>
  </entry>
  <entry>
    <title>hexo(1)   hexo自定义域名以及解析</title>
    <url>/2018/03/27/1/</url>
    <content><![CDATA[<p>最近又有点空，把丢弃好久的blog又拿出来折腾了一番。申请了一个付费域名 <a href="http://blog.wyue.site">blog.wyue.site</a>不得不说，在msra这一年多依赖，不知不觉代码能力比以前还是提高了很多的<del>（自吹一波。。。溜了）</del>。 这次想要记录一下，hexo博客搭建过程中个性化域名的相关事情。主要是从个性化域名的绑定，到dns的解析的整个过程。涉及到的坑主要有</p>
<ol type="1">
<li>dns 解析的相关基础知识</li>
<li>国内博客托管到 <a href="https://coding.net/pages/">coding</a> 国外托管到<a href="https://pages.github.com/">github</a></li>
<li>同一个域名分别解析到这两个地址</li>
<li>这两个博客托管网站上的设置。特别是github 有一个奇怪的CNAME 文件要放到根目录下，如何利用hexo直接生成</li>
</ol>
<p>这里默认大家已经在coding和github上托管好自己的blog了。也就是说，可以用 username.github.io 和 username.coding.me 访问自己的博客了。如果大家还不清楚的话，网上教程很多。也可以留言。</p>
<p>下面就是详细内容啦。</p>
<h1 id="dns-解析的相关基础知识">1.dns 解析的相关基础知识</h1>
<p>这方面我也是现学现卖。水平大概是刚刚好能把这个博客搭起来并且正确设置成自定义域名的水平。要是有什么不对的，欢迎留言指正.</p>
<h2 id="dns-解析的基本流程">dns 解析的基本流程</h2>
<p>这部分其实参考了很多 <a href="https://www.cloudxns.net/Support/detail/id/737.html">这里</a>，<a href="https://support.dnsimple.com/categories/dns/">这里</a>，还有<a href="http://www.ruanyifeng.com/blog/2016/06/dns.html">这里</a> 的内容。具体可以参考前面三个网址。我这里大概点到后面会涉及的几个概念。</p>
<ol type="1">
<li><p>DNS 的定义和作用</p>
<blockquote>
<p>DNS （Domain Name System 的缩写）的作用非常简单，就是根据域名查出IP地址。你可以把它想象成一本巨大的电话本。举例来说，如果你要访问域名<code>math.stackexchange.com</code>，首先要通过DNS查出它的IP地址是<code>151.101.129.69</code>。</p>
</blockquote>
<p>​</p></li>
<li><p>DNS 解析的过程</p>
<blockquote>
<p>就拿博客来举例。假设你在github上托管了一个网站，github给你分配了一个<strong><em>ip地址</em></strong>和一个配套的<strong><em>域名</em></strong>(假设为 test.github.io).</p>
<p>那么你在请求 test.github.io 的时候，就要先从dns服务器上找到这个<strong><em>域名</em></strong>的对应的<strong><em>ip地址</em></strong>，如果你用的是linux服务器，你可以输入<code>dig test.github.io</code> 来查看这个过程。拿我这博客来说吧，输入 <code>dig wangyue.ml</code>, 应该就能看到如下字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;$ dig wangyue.ml</span><br><span class="line">&gt;; &lt;&lt;&gt;&gt; DiG 9.9.5-3ubuntu0.16-Ubuntu &lt;&lt;&gt;&gt; wangyue.ml</span><br><span class="line">&gt;;; global options: +cmd</span><br><span class="line">&gt;;; Got answer:</span><br><span class="line">&gt;;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 50601</span><br><span class="line">&gt;;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">&gt;;; OPT PSEUDOSECTION:</span><br><span class="line">&gt;; EDNS: version: 0, flags:; udp: 4000</span><br><span class="line">&gt;;; QUESTION SECTION:</span><br><span class="line">&gt;;wangyue.ml.                    IN      A</span><br><span class="line"></span><br><span class="line">&gt;;; ANSWER SECTION:</span><br><span class="line">&gt;wangyue.ml.             599     IN      CNAME   xfdywy.github.io.</span><br><span class="line">&gt;xfdywy.github.io.       3599    IN      CNAME   sni.github.map.fastly.net.</span><br><span class="line">&gt;sni.github.map.fastly.net. 29   IN      A       151.101.9.147</span><br><span class="line"></span><br><span class="line">&gt;;; Query time: 480 msec</span><br><span class="line">&gt;;; SERVER: 10.172.11.45#53(10.172.11.45)</span><br><span class="line">&gt;;; WHEN: Tue Mar 27 20:32:43 JST 2018</span><br><span class="line">&gt;;; MSG SIZE  rcvd: 124</span><br></pre></td></tr></table></figure>
<p>我们可以看到第14号表示某服务器将<code>wangyue.ml</code> 解析到了<code>xfdywy.github.io.</code>,再 进一步又解析到了<code>sni.github.map.fastly.net.</code>, 最后又解析到了 <code>151.101.9.147</code>. 可以看到前面两次都是解析到另一个<strong><em>域名</em></strong>（被称为 <code>CNAME</code>：规范名称记录（Canonical Name）），最后一次解析到了一个确定性的<strong><em>IP地址</em></strong>（被称为<code>A</code>：地址记录（Address），返回域名指向的IP地址。）。常见的dns类型记录有：</p>
<blockquote>
<ul>
<li><a href="https://support.dnsimple.com/articles/a-record">A</a></li>
<li>AAAA</li>
<li><a href="https://support.dnsimple.com/articles/caa-record">CAA</a> (see note below)</li>
<li><a href="https://support.dnsimple.com/articles/cname-record">CNAME</a></li>
<li><a href="https://support.dnsimple.com/articles/mx-record">MX</a></li>
<li><a href="https://support.dnsimple.com/articles/ns-record">NS</a></li>
<li>TXT</li>
<li><a href="https://support.dnsimple.com/articles/spf-record">SPF</a></li>
<li><a href="https://support.dnsimple.com/articles/srv-record">SRV</a></li>
<li>NAPTR</li>
<li>HINFO</li>
<li>SSHFP</li>
</ul>
</blockquote>
<p><strong>我们今天只用到<code>CNAME</code></strong></p>
</blockquote></li>
</ol>
<h1 id="申请域名">2 申请域名</h1>
<p>这一步就是实际操作啦。申请域名当然去哪都行。这里提供两个，一个是国内的<a href="https://wanwang.aliyun.com/domain/">阿里云</a>，一个是国外的<a href="http://www.freenom.com">freenom</a> 。 操作大同小异，都是</p>
<ol type="1">
<li>注册账号，登录</li>
<li>搜索并找到可用的域名，买下来（阿里云里面有一些挺便宜的域名。freenorm里面有一些收费的，也有挺多免费的，都是顶级域名，就是xxx.xxx 这种）</li>
<li>这一步就结束啦。买下来的这个域名就属于你自己啦。例如<code>wangyue.ml</code>。</li>
</ol>
<h1 id="dns解析">3 dns解析</h1>
<p>想要在浏览器里面输入 <code>wangyue.ml</code> 就能跳到这里。必不可少的一步就是要告诉全世界的电脑，这个域名现在指向这个地方啦。而这一步就是由 dns服务器来负责的。我们需要做的就是将<code>wangyue.ml</code> 与固定的ip地址绑定起来(A)，或者是与某已有域名绑定起来（CNAME）.</p>
<p>下面我们以freenorm购买的域名为例，实现一个域名绑定多个域名，这样我们就可以实现国内访问托管在coding上的blog，国外访问托管在github上的blog。这里默认大家已经在coding和github上托管好自己的blog了。也就是说，可以用 username.github.io 和 username.coding.me 访问自己的博客了。</p>
<ol type="1">
<li><p>freenom 买完域名之后，freenom提供了一个dns解析的服务。但是因为freenom的dns解析在国内可能不是很流畅，我选择<a href="https://www.cloudxns.net/">cloudXNS</a> 来做dns解析（真的不是打广告。。。。国内的也可以试试腾讯的dnspod） 。在这之前，我们需要把这个域名的控制权从freenom 交到 cloudXNS 的手上，方法就是按照 cloudXNS 提供的 dns server 地址，填到freenom的设置里面。具体操作流程为：</p>
<blockquote>
<p>购买完freenom后，从freenom首页，点击services -&gt; my domain -&gt; manage domain -&gt; Management Tools -&gt; Nameservers -&gt; Use custom nameservers (enter below) -&gt; 填入 cloudXNS 的 dns server地址</p>
</blockquote>
<blockquote>
<p>如果你找不到my domain ， 请确认你是不是登录了。</p>
</blockquote></li>
<li><p>cloudXNS的 dns server 怎么获取 ： 同理。登录cloudXNS之后，选择 管理控制台 -》 我的域名 -》 添加域名，填写你刚刚在freenom购买的域名，这个时候提示域名未接管，然后会告诉你server地址是多少，怎么操作。</p></li>
<li><p>等待一段时间，大约1~5分钟。等待接管。</p></li>
<li><p>等到cloudXNS 接管状态显示已接管的时候，点击域名进行管理(以下假定购买的域名是wangyue.ml)。添加记录。</p>
<ol type="1">
<li>主机记录这里空着的话，表示这条记录解析的是 wangyue.ml , 如果写www， 表示这条记录解析的是www.wangyue.ml 。 剩下的同理</li>
<li>记录类型填A的话，后面的记录值填写IP地址。这种情况一般适用于自己买了虚拟主机，分配了一个固定 ip，然后直接解析到那个ip就行。我们这里选CNAME，解析到原始域名。（即wangyue.ml 解析到 xxx.github.io 这种）</li>
<li>然后在线路类型选全网默认，然后记录值填xxx.coding.me(记得把xxx换成自己的.....).然后保存就好。</li>
<li>到上一步，我们就算已经把我们新买到的域名解析到原始的域名了。为了实现国外用户访问托管到github的博客，我们再同样添加一条记录，只不过线路选择海外默认，记录值填xxx.github.io</li>
<li>dns 服务器端的设置就算完全结束了。下面我们需要分别到github和coding上去设置，使得我们能用新地址访问他们。（这里完全是因为github和coding的设定因素，如果你是绑定到自己的服务器的ip上去，到了这一步就已经完全结束了，可以跳过下一节）</li>
</ol></li>
<li><p>注意，dns设置不是即时生效的，不同地方需要不同的时间，有时候几分钟就好了，有时候要一晚上一天。总之设置好去睡一觉，第二天来看应该就没问题了。不过别忘了继续往下看，下面的也很重要。</p></li>
</ol>
<h1 id="github和coding的设置">4.github和coding的设置</h1>
<p>可能是从安全的角度和服务器负载的角度，github和coding要求自定义域名绑定的时候还要分别在自己的网站上设置一下（前半句我完全乱猜的，后半句是真的 ，认真脸）</p>
<h2 id="coding的设置">coding的设置</h2>
<p>首先你需要是银牌会员，个人信息填完全了就自动是了。</p>
<p>进入到你托管博客的那个项目，然后点page 服务， 自定义域名 ，填上 wangyue.ml. 搞定。</p>
<h2 id="github的设置">github的设置</h2>
<p>进入github你托管博客的那个项目，点setting，GitHub Pages ，Custom domain ， 输入wangyue.ml，点save。暂时搞定。</p>
<p>为什么说暂时搞定呢，因为你仔细看你github的这个repository, 你会发现一个叫做CNAME 的文件出现在根目录下，里面只有一行，就是 wangyue.ml . github 需要依赖这个文件来让你用自己的域名来访问你的blog。</p>
<p><strong><em>但是</em></strong> 问题出现在，你每次部署blog之后，就是<code>hexo g</code> <code>hexo d</code> 之后这个文件都会消失。因为你本地目录下并没有这个文件，所以要想办法让hexo编译的时候就生成这个文件。</p>
<p><strong><em>但是</em></strong> 问题出在hexo编译都是md文件，而且会渲染成html文件。那么怎么办呢。</p>
<h1 id="github-cname-文件">5.github CNAME 文件</h1>
<p>答案就是你把github生成的CNAME 文件放一份到你的 you blog/source/ 文件夹下，或者自己手写也行，注意文件名没有后缀，就叫CNAME， 文件内容就写你的域名 <code>wangyue.ml</code>。</p>
<p>然后，最最关键的一步，你要去你blog的根目录下，修改 _config.yml 文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_render:</span> <span class="string">CNAME</span></span><br></pre></td></tr></table></figure>
<p>之后就愉快的</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d </span><br></pre></td></tr></table></figure>
<p>再次提醒注意，dns设置不是即时生效的，不同地方需要不同的时间，有时候几分钟就好了，有时候要一晚上一天。总之设置好去睡一觉，第二天来看应该就没问题了。</p>
<h1 id="至此大功告成">至此，大功告成</h1>
]]></content>
      <categories>
        <category>hexo related</category>
      </categories>
      <tags>
        <tag>自定义域名</tag>
        <tag>github page</tag>
        <tag>coding page</tag>
        <tag>hexo</tag>
        <tag>dns</tag>
        <tag>CNAME</tag>
      </tags>
  </entry>
  <entry>
    <title>静态博客网页中的网易云音乐播放器</title>
    <url>/2020/04/12/1/</url>
    <content><![CDATA[<p>(终于填了<a href="/2018/05/06/1/">之前</a>的坑)</p>
<p>一直想做个博客中的音乐播放器，之前做的那个版本因为啥懂不懂就瞎写的，性能太差，搞不好就把网页搞卡死了。 最近重新修改了一下，新版本就流畅很多了。 纯前端实现，可以用在各种静态博客中，比如hexo，hugo等。</p>
<p>可以先体验一下, <a href="/music">点这里哦</a></p>
<p><span id="more"></span></p>
<p># 大概思路 主要是用到APlayer这个组件，自己写的部分主要在于网易云音乐的部分。</p>
<p>简而言之就是利用网易云音乐的api，通过网易云音乐的歌单id，获取音乐的url地址，歌词，歌名，歌手信息等。</p>
<p># 网易云音乐api 关于网易云音乐的api，如果不滥用的话，可以用我搭在heroku上的这个</p>
<blockquote>
<p><a href="https://y-cloud-music-api.herokuapp.com/">https://y-cloud-music-api.herokuapp.com/</a></p>
</blockquote>
<p>api网址就是这个，想要看接口细节的话，可以通过点开链接看文档，也可以看我的代码实现的例子。</p>
<h1 id="代码">代码</h1>
<p>首先上代码，代码在这里</p>
<blockquote>
<p><a href="https://gist.github.com/xfdywy/57b61f13a1a4e48d69c611bdbff407d2">https://gist.github.com/xfdywy/57b61f13a1a4e48d69c611bdbff407d2</a></p>
</blockquote>
<p>自己copy下来到一个文件里面去， 搞一个http server， 然后用类似 <code>http://localhost:端口号</code> 就可以跑起来看效果了。 比如你用vscode，可以右击用 <code>open with live server</code>，又或者你用webstorm，直接点“浏览器打开”应该就可以。</p>
<p>如果你直接点开html文件，可能会遇到问题，因为你是file：//协议打开的，需要是http：//协议（我猜的我不懂）。</p>
<h1 id="分析">分析</h1>
<p>大概分这么几步</p>
<ol type="1">
<li>先写个网页ui</li>
<li>引用APlayer模块</li>
<li>跟网易云音乐api交互，获得歌曲信息</li>
<li>把歌曲信息传给APlayer进行播放。</li>
</ol>
<p>新版本修改了逻辑，我先获取第一首歌的信息，然后传给播放器播放，之后再去获取剩下的，并且所有api的交互都是用axio进行异步操作，保证网页的流畅性，可以一边播放一边获取剩下的歌的信息，这样就不会出现网页等好久都刷不出来的情况了。等第一首歌放到一半，后面的肯定也都加载出来了，完美~</p>
<h2 id="网页ui">网页ui</h2>
<p>我写的巨丑。。。。哪位大佬给改改，帮我改改吧。 其实就是一个输入框，一个提交按钮，一个播放器占位符, gist代码的27行以上。</p>
<h2 id="aplayer-模块">APlayer 模块</h2>
<p>根据APlayer的文档，new一个对象就好了，在gits文件的第200行。</p>
<p>文档在这里： &gt; <a href="https://aplayer.js.org/#/zh-Hans/">https://aplayer.js.org/#/zh-Hans/</a></p>
<p>需要传几个参数，比如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ap = <span class="keyword">new</span> APlayer(&#123;</span><br><span class="line">    container: <span class="built_in">document</span>.getElementById(<span class="string">&#x27;player1&#x27;</span>),</span><br><span class="line">    lrcType: <span class="number">1</span>,</span><br><span class="line">    fixed: <span class="literal">false</span>,</span><br><span class="line">    audio: first_song,</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
<p>container是之前html代码预留的div lrcType是歌词的类型，我这里选1，具体可以看文档 fixed: 是否开启吸底模式, audio: 参数是一个 array，每个元素是一个对象，每个对象需要的属性下面来说。</p>
<h2 id="歌曲信息">歌曲信息</h2>
<p>主要是歌曲的url地址，为了美观还需要歌词，封面等，需要通过api获取。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;subdiv2&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>首先获取输入框的歌单id</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> playlist =   downloadplaylist(input.textContent);</span><br><span class="line">playlist = <span class="keyword">await</span> playlist; </span><br><span class="line"> </span><br></pre></td></tr></table></figure>
<p>然后获取歌单中所有歌曲的id</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> first_song = <span class="keyword">await</span>  loadplaylist([playlist[<span class="number">0</span>]]) ; </span><br></pre></td></tr></table></figure>
<p>先获取第一首歌的信息，之后传给播放器，开始播放。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> rest_songs =  <span class="keyword">await</span>  loadplaylist(playlist.slice(<span class="number">1</span>)) ;</span><br><span class="line"></span><br><span class="line">ap.list.add(rest_songs);</span><br></pre></td></tr></table></figure>
<p>之后再同步获取剩下的歌曲信息，并且加到播放器中去。</p>
<p>我代码的逻辑是：</p>
<p>downloadplaylist 函数输入为网易云音乐的歌单id，返回值为歌单中所有歌曲的id。</p>
<p>loadplaylist 函数的输入为所有歌曲的id，输出为上面说到的audio需要的 array</p>
<p>gist代码 160-173行是调用其他几个小函数与api进行交互，分别获取信息</p>
<p>这里注意我们143到152行提出get请求后，这些请求是以async的方式同时请求出去的，互相不阻塞。 直到所有的get请求都发出去了，我们再利用await的方法把结果都拿到（154-156行）， 这样性能会比较好。</p>
<p>178-185行是把其中一首歌的信息封装到一个对象里面去，tmp。 然后把tmp放到 res这个array里面去， 不断循环这段代码就可以把歌单里面所有歌曲的信息都封装好了。</p>
<h1 id="总结">总结</h1>
<p>主要是学习了axio的使用，以及async 和await的使用。 此外82到93行简单试验了一下addEventListener的用法。</p>
<p>作为一个外行，如果有更好的想法，欢迎与我交流，可以在博文下面留言，也可以去博客的留言板（Board）留言。</p>
<blockquote>
<p>我博客音乐的网址： https://www.blog.wyue.site/music</p>
</blockquote>
<blockquote>
<p>APlayer 网址： https://aplayer.js.org/#/</p>
</blockquote>
<blockquote>
<p>axio 网址：http://axios-js.com/</p>
</blockquote>
<p>.</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>music</tag>
        <tag>hexo blog</tag>
      </tags>
  </entry>
  <entry>
    <title>手动输入网易云音乐歌单创建hexo 音乐播放器</title>
    <url>/2018/05/06/1/</url>
    <content><![CDATA[<p><strong>!我终于来填坑啦！ <a href="/2020/04/12/1/">来这里看吧，</a></strong></p>
<p>先挖个坑。欢迎点击左边的 <code>Music</code>来看看效果。也可以用这个链接<a href="https://blog.wyue.site/music/">https://blog.wyue.site/music/</a></p>
<p>已经实现了的是在hexo博客上，搞一个音乐播放器。 播放器选的是aplayer。 通过输入网易云音乐的歌单id，来创建播放列表。可以手动输入歌单id。</p>
<span id="more"></span>
<p>提前感谢各位大佬给的网易云音乐api。</p>
<p>学习到的几点： ## javascript http get 请求处理 ## javascript json 处理 ## javascript function 循环等 ## 简单css</p>
<p>生成音乐页面的全部的code 在这里 &gt; https://gist.githubusercontent.com/xfdywy/e7fcaaf6f1c12975455f08478881c3cf/raw/154f07a9a853bd1b1ceaa9f6bb43983b85167fcc/music.md</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>aplayer</tag>
        <tag>网易云音乐api</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博文</title>
    <url>/2016/03/01/1/</url>
    <content><![CDATA[<p>这是<strong>新的开始</strong>，我用hexo创建了第一篇文章。</p>
<p>通过下面的命令，就可以创建新文章 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new 新的开始</span><br></pre></td></tr></table></figure></p>
<p>感觉非常好。</p>
]]></content>
  </entry>
  <entry>
    <title>我与我的小可爱</title>
    <url>/2018/02/14/1/</url>
    <content><![CDATA[<figure>
<img data-src="https://cdn.jsdelivr.net/gh/xfdywy/blogResource@master/image/%E8%AF%8D%E4%BA%91.png" alt="" /><figcaption>词云1</figcaption>
</figure>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/xfdywy/blogResource@master/image/%E8%AF%8D%E4%BA%911.png" alt="" /><figcaption>词云</figcaption>
</figure>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/xfdywy/blogResource@master/image/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180214161417.jpg" alt="" /><figcaption>微信图片_20180214161417</figcaption>
</figure>
<figure>
<img data-src="https://cdn.jsdelivr.net/gh/xfdywy/blogResource@master/image/love.jpg" alt="" /><figcaption>lalal</figcaption>
</figure>
<h1 id="年10月4日">2016年10月4日</h1>
<h1 id="年3月9日">2017年3月9日</h1>
<h1 id="年2月14日">2018年2月14日</h1>
]]></content>
      <categories>
        <category>book reading</category>
      </categories>
      <tags>
        <tag>-读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>&#39;wangyuehahah&#39;</title>
    <url>/2016/03/02/1/</url>
    <content><![CDATA[<p>###i just want to have a try</p>
<blockquote>
<p>hallo world</p>
</blockquote>
<p>this is 20160402</p>
]]></content>
  </entry>
  <entry>
    <title>好用的软件</title>
    <url>/2020/04/12/2/</url>
    <content><![CDATA[<p>总结一下自己在win10系统上用到的好用的软件，每次换新系统都必装的一些软件。原则是，方方面面用的顺手。</p>
<span id="more"></span>
<p>我以后遇到，会来更新这个list的，如果有大佬有好的私房软件，欢迎在底下留言呀。</p>
<h1 id="小众神器们">小众神器们</h1>
<ul>
<li><p>文件内容搜索 FileLocator Lite</p></li>
<li><p>文件搜索 Everything</p></li>
<li><p>快捷搜索 Listary</p></li>
<li><p>将远程ssh网盘等映射成本地 RaiDriver</p></li>
<li><p>小书匠，写markdown 神器</p></li>
<li><p>图片查看 Honey View</p></li>
<li><p>对比两个文件的diff Beyond Compare</p></li>
<li><p>压缩软件必备 Bandizip</p></li>
<li><p>好看的cmd，内置了bash命令支持 Cmder</p></li>
<li><p>视频播放器 Potplayer</p></li>
<li><p>文件多地自动备份 goodsync</p></li>
<li><p>与latex配合的很好的简单pdf阅读器 sumatra</p></li>
<li><p>截图神器 snipaste</p></li>
<li><p>连接远程服务器神器 mobaxterm</p></li>
<li><p>录屏生成gif screentogif</p></li>
<li><p>网络流量管理 fiddler</p></li>
<li><p>微博备份 稳部落</p></li>
</ul>
<p># 大众常规好用</p>
<ul>
<li><p>文本编辑器 vscode</p></li>
<li><p>latex编辑器 texstudio</p></li>
<li><p>记笔记 onenote</p></li>
<li><p>win10 pdf标注软件 xodo</p></li>
<li><p>常规pdf阅读器 pdf-xchange</p></li>
<li><p>日程任务规划 microsoft todo</p></li>
</ul>
<p>.</p>
]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>软件</tag>
        <tag>日常办公</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>新开一坑，读书笔记</title>
    <url>/2016/07/07/1/</url>
    <content><![CDATA[<p>就用这个帖子记录一下自己的读书笔记吧</p>
<hr />
<h1 id="消失的地平线2016.">1.《消失的地平线》2016.</h1>
<h2 id="内容简介">内容简介</h2>
<blockquote>
<ul>
<li>香格里拉的梦，梦幻，不真实.一帮外国人，各有各的性格，“被选中”，被带到一个类似于世外桃源的地方，这里没有争吵，没有烦恼，似乎独立于这个世界而存在，让人迷醉。在这里，只用想着，活下去，心放宽，享受生活。</li>
</ul>
</blockquote>
<h2 id="感想">感想</h2>
<blockquote>
<ul>
<li>我是在去成都的一路上给读完的这本书，大概那段时间自己的心情也就跟这本书里面一样，充满虚幻的想象，充满一种浮夸，肥皂泡吧。那些和尚，那几个外国人，世外桃源般，突然降临，又突然逃离。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>就好像，这学期开始的两个月，突然发生又突然结束的一些事情。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>发生的突然，让我连自己也觉得不可思议。结束的突然，让我难以坦然。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>误入世外桃源终不能长久，甚至我觉得世外桃源也终不能长久。香格里拉这种地方就像毒品，借着正常的生活带来的种种黑暗面，发自己的光，就像毒品能给空虚的人以一种病态的安慰。若不能明辨，若不能逃离，便会迷醉其中。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>最可怕的是心态的改变，这也是一直以来，所有事情最直接影响我们的方式：不是一件事情发生了，便会改变生活，便能从根本上改变什么；而是，一件事情发生了，很快又过去了，但是下次再发生时，我们看待这件事情的方式就不同了。楞次定律说的好啊，事情发生的结果是会产生阻碍其发生的某种影响，所以一件事情并不会从根本上改变什么，但是，<strong>阻碍</strong>不是<strong>阻止</strong>啊，心态变了，视角变了，就是从根上变了。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>恩，我就是想说，我可能在变了。</li>
</ul>
</blockquote>
<h1 id="月亮和六便士">2.《月亮和六便士》</h1>
<h1 id="乌合之众">3.《乌合之众》</h1>
<h1 id="生命民间记忆之史铁生">4.《生命，民间记忆之史铁生》</h1>
]]></content>
      <categories>
        <category>book reading</category>
      </categories>
      <tags>
        <tag>-读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Jupyter lab 安装及多kernel配置</title>
    <url>/2018/04/27/1/</url>
    <content><![CDATA[<p>Jupyter lab 是Jupyter notebook 的升级版，是ipython notebook的升级版。 大体来说就是用浏览器作为IDE，编写代码边运行，并且保留结果，形成像notebook一样的一份文档。</p>
<p><span id="more"></span></p>
<p># 安装 Jupyter lab 的安装很简单，假定已经安装了anaconda了。那么已经有了Jupyter notebook了，这个时候安装只需要一句命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install jupyterlab</span><br><span class="line">或者</span><br><span class="line">conda install -c conda-forge jupyterlab</span><br></pre></td></tr></table></figure>
<p>安装好了启动也是非常简单，在命令行输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter lab</span><br></pre></td></tr></table></figure>
<p>就ok了。当然也可以进行一些配置, 与jupyter notebook 的配置完全一致。你可以输入<code>jupyter lab -h</code> 来进行查看。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter lab --port=<span class="string">&#x27;8080&#x27;</span> --ip=<span class="string">&#x27;0.0.0.0&#x27;</span> --notebook-dir=<span class="string">&#x27;d:/&#x27;</span></span><br></pre></td></tr></table></figure>
<p>就是指运行在8080端口，可以从任意ip访问（可以远程机器直接连过来），工作路径为d盘根目录。</p>
<p>看到一连串输出后就可以打开浏览器访问了，ip:port 就可以了。如果在本机就是localhost:8080(一般会弹出浏览器)。 这里需要配置一下密码登录，如果你不配置密码登录。你就需要输入一个token，显示在命令行里面，我觉得有点麻烦，还是设置一个密码比较好。</p>
<h1 id="配置密码">配置密码</h1>
<p>如果没有config文件(默认在 c:/User/&lt; your user name&gt;/.jupyter/jupyter_notebook_config.py )，执行下面这个 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure> 然后执行 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook password</span><br></pre></td></tr></table></figure> 输入你的密码，生成对应的hash值，放到config文件的同目录下了（自动）</p>
<p>应该已经可以了。试试在浏览器里面输入localhost:8080 ，如果还是不行，就手动把生成的 <code>jupyter_notebook_config.json</code> 里面的password后面的， 复制到 <code>jupyter_notebook_config.py</code> 中</p>
<p>找到下面这行并修改 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.password &#x3D; u&#39;...刚才复制的那个密文&#39;</span><br></pre></td></tr></table></figure> 进去之后就是这样了 <img data-src="https://img-1253424161.cos.ap-shanghai.myqcloud.com/xsj/2018/4/1524829854782.jpg" alt="enter description here" /></p>
<p>下一个问题就是如何配置多个kernel了。</p>
<h1 id="配置python2-python3-r的kernel">配置python2 python3 r的kernel</h1>
<p>## R kernel 如果你已经安装了r，那么在r的命令行下输入</p>
<figure class="highlight r"><table><tr><td class="code"><pre><span class="line">install.packages(<span class="built_in">c</span>(<span class="string">&#x27;pbdZMQ&#x27;</span>, <span class="string">&#x27;repr&#x27;</span>, <span class="string">&#x27;devtools&#x27;</span>)) </span><br><span class="line">devtools::install_github(<span class="string">&#x27;IRkernel/IRkernel&#x27;</span>) </span><br><span class="line">IRkernel::installspec()</span><br></pre></td></tr></table></figure>
<h2 id="多个python-kernel">多个python kernel</h2>
<p>如果你的多个python 是安装在多个环境中的，就是用activate &lt; env_name &gt;这样的语句可以进入不同的环境的话，可以这样操作，下面假定python 3.5 安装在py35 的环境里面，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acitvate py35   (or <span class="built_in">source</span> activate py35)</span><br><span class="line">python -m ipykernel install --name py35</span><br><span class="line">deactivate (or <span class="built_in">source</span> deactivate)</span><br></pre></td></tr></table></figure>
<p>其他同理。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>Jupyter lab</tag>
        <tag>python</tag>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title>支持Python3的腾讯云 对象存储 cos python3 sdk</title>
    <url>/2018/04/09/1/</url>
    <content><![CDATA[<p>今天填了一天的坑。成果是 qcloud_cos_py3. 腾讯云的cos python sdk cos-python-sdk-v5 只支持python2.7， 而我的qt项目要 python3.* .</p>
<p>于是就自己动手写了一个Python 3.* 的sdk。</p>
<p>其实也就是在2.7版本的基础上，修改了所有不兼容的函数和用法。 这里先贴一个地址，如果有需要的可以自取，我自己试用了基本功能，没发现bug。并且大部分都是与源代码保持一致，有bug的可能性很小。</p>
<p>下载文件就可以直接import的： https://github.com/xfdywy/qcloud_cos_py3</p>
<p>可以像官方那样安装后直接import的： https://github.com/xfdywy/cos-python-sdk-v5</p>
<p>有问题请留言或者去github提issue。</p>
<p>后续会把心得（填坑过程）贴出来。一周内把。督促一下自己。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>py2to3</tag>
        <tag>腾讯云cos</tag>
        <tag>qcloud_cos_py3</tag>
      </tags>
  </entry>
  <entry>
    <title>python notebook</title>
    <url>/2016/08/10/1/</url>
    <content><![CDATA[<p>就用这个帖子记录一下自己学习python遇到的一些小细节吧</p>
<p>#1 ndarray.swapaxes(axis1, axis2) : 交换两个轴的元素后的矩阵. &gt;http://blog.csdn.net/qq403977698/article/details/47254597 转魔方，始终的面对着的面向下为第一维度，水平为第二维度 #2 [x for x in list if r.match(x)] &gt;http://stackoverflow.com/questions/3640359/regular-expressions-search-in-list</p>
<p>#3 names = df.columns.tolist()</p>
<p>names[names.index('two')] = 'new_name'</p>
<p>df.columns = names</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python程序人生</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Python 59 specific ways 读书笔记 第一章</title>
    <url>/2018/03/27/2/</url>
    <content><![CDATA[<p>今天开始学习这本书，准备用自己的博客做点笔记。 我自己计划着，笔记的内容会会随着自己的理解而变化，在想到好的组织方式之前，我选择“抄书”吧。预计一章一篇博客。总共8章。 今天开始第一章</p>
<h1 id="第1条-确认自己用的python版本">第1条： 确认自己用的python版本</h1>
<p>这个不用多说了，py2和py3 还是有一定 的兼容性问题的，但是大部分都不成问题，跑代码前一定要先确认好自己的python版本。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure>
<p>这个是系统命令版本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.version_info</span><br><span class="line">sys.version</span><br></pre></td></tr></table></figure>
<h1 id="第2条-遵循pep8-风格指南">第2条： 遵循PEP8 风格指南</h1>
<p>PEP8 全称 Python Enhancement Proposal #8.下面是比较重要的几点： ## 空白 - 用space 而不是 tab - 每一层缩进都用4个space - 每行字符不超过79个 - 函数与类之间应该用两个空行隔开 - 同一个类不同方法用一个空行隔开 - 下标不要添加空格，同理还有给参数赋值 - 变量赋值的时候左右各写一个空格</p>
<h2 id="命名">命名</h2>
<ul>
<li>函数，变量和属性应该用小写，并且各个单词之间用下划线连接</li>
<li>类与异常，单词首字母大写</li>
<li>受保护的实例属性，应该以下划线开头</li>
</ul>
<h2 id="表达式和语句">表达式和语句</h2>
<ul>
<li><code>if a is not b</code> 而不是 <code>if not a is b</code></li>
<li>不要用检测长度的方法来判断是否为空</li>
<li>不要编写单行的 <code>if， for，while</code></li>
<li>import 总是放在开头</li>
<li>import语句要按照 标准库模块，第三方模块，自用模块来分成三块，并且按照字母序排列</li>
</ul>
<h1 id="第3条了解bytesstr和unicode的区别">第3条：了解bytes，str和unicode的区别。</h1>
<p>Unicode 是「字符集」 UTF-8 是「编码规则」gbk等也是</p>
<p>python3有两种表示字符序列的类型：bytes和str python2有三种表示字符序列的类型： str和unicode</p>
<p>python3中的str相当于py2的unicode python3中的str只能encode python3中str可以被encode成bytes，例如gbk utf-8等</p>
<p>python2中unicode是一种最基本的数据类型。需要加u在前面表示。<code>u 'abc'</code>. unicode可以被encode成str（如gbk，utf-8等） python2中str是指utf8 gbk这样的编码过的对象，可以被decode成unicode。默认字符串是str.它本身存储的就是字节码（bytes）。</p>
<h1 id="第4条-用辅助函数来取代复杂表达式">第4条： 用辅助函数来取代复杂表达式</h1>
<p>不要过度运用python的语法特性，写那些特别复杂且难以理解的表达式，特别是如果要反复利用的话，更要包装一下成函数。</p>
<h1 id="第5条-了解切割序列的办法">第5条： 了解切割序列的办法</h1>
<p>起始元素包含，结束元素不包含 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a[:<span class="number">4</span>]</span><br><span class="line">a[-<span class="number">4</span>:]</span><br><span class="line">a[<span class="number">3</span>:-<span class="number">3</span>]</span><br></pre></td></tr></table></figure> slice列表时，start越界也不会出问题，但是访问单个元素的时候会报错 slice列表是一份拷贝，不是引用</p>
<h1 id="第6条-单次切片操作内不要同时使用start-end-stride">第6条： 单次切片操作内，不要同时使用start， end， stride</h1>
<p>python提供了<code>list[start:end:stride]</code>的操作 stride 为负数表示反过来取 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x[::-<span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>effective</tag>
      </tags>
  </entry>
</search>
